/*
 * Class ForensicExpertWitnessReport.java of package ForensicExpertwitnessReport
 * 
 * Using this class you are able to retrieve files which have been tagged
 * under a given name in Autopsy, and add these files and their information
 * into a structured table inside a given Microsoft Word Document.
 * 
 * This class was written for a final year project for
 * the degree of Computer and Digital Forensics BSc (Hons),
 * at Northumbria University in Newcastle. This project includes
 * the aim of aiding in automation, ease and effectivness of digital 
 * forensic practitioners while conducting digital forensic
 * investigations in Autopsy.
 * 
 * @author Chris Wipat
 * @version 19.04.2018
 */

package ForensicExpertWitnessReport;

import javax.swing.JPanel;
import org.sleuthkit.autopsy.report.GeneralReportModule;
import org.sleuthkit.autopsy.report.ReportProgressPanel;
import org.sleuthkit.autopsy.casemodule.services.TagsManager;
import org.sleuthkit.datamodel.AbstractFile;
import org.sleuthkit.datamodel.Content;
import org.sleuthkit.datamodel.ContentTag;
import java.util.ArrayList;
import java.util.logging.Level;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.datamodel.TagName;
import org.sleuthkit.datamodel.TskCoreException;
import java.util.List;
import javax.swing.JOptionPane;
import org.sleuthkit.autopsy.coreutils.Logger;
import com.aspose.words.Document;

public class ForensicExpertWitnessReport implements GeneralReportModule {
    
    // Declare Instance Variables
    private final String name = "Forensic Expert Witness Report";
    private final String desc = "Add tagged files into a forensic expert witness report.";
    private String fullpath;
    public TagsManager tagsmanager = Case.getCurrentCase().getServices().getTagsManager();
    private List<TagName> tagNames;
    private static ForensicExpertWitnessReport instance;   
    private ForensicExpertWitnessReportConfigPanel configPanel;
    private Document ForensicExpertWitnessReport = null;

    /**
     * GetName Method
     * First Accessor Method.
     * 
     * Used to return the name of the report module to Autopsy.
     * Necessary while implementing a report module.
     * 
     * @return name 
     */
    @Override
    public String getName() {
        return name;
    }    
    
    /**
     * GetDescription Method
     * Second Accessor Method.
     * 
     * Used to return the description of the report module to Autopsy.
     * Necessary while implementing a report module.
     * 
     * @return desc 
     */
    @Override
    public String getDescription() {
        return desc;
    }

    /**
     * GetRelativeFilePath Method
     * Third Accessor Method.
     * 
     * Used to return the name of the report which is generated by
     * this report module. Necessary while implementing a report
     * module.
     * 
     * @return "report.docx"
     */
    @Override
    public String getRelativeFilePath() {
        return "report.docx";
    }
    
    /**
     * GenerateReport Method.
     * Main and First mutator method
     * 
     * Uses the selected tag names, target document and evidence header given by 
     * ForensicExpertWitnessReportConfigPanel to retrieve the file information for files
     * under this tag name, and add them into a structured table under the appropriate
     * evidence header inside the given Microsoft Word document.
     * 
     * @param baseReportDir
     * @param progressPanel 
     */
    @Override
    public void generateReport(String baseReportDir, ReportProgressPanel progressPanel) {
   
        progressPanel.setIndeterminate(false);
        progressPanel.start();
        progressPanel.updateStatusLabel("Adding files...");
          
        TagsManager tagsManager = Case.getCurrentCase().getServices().getTagsManager();
        tagNames = configPanel.getSelectedTagNames();
        ArrayList<String> failedExports = new ArrayList<String>();
        for (TagName tagName : tagNames) {
            if (progressPanel.getStatus() == ReportProgressPanel.ReportStatus.CANCELED) {
                break;
            } 
            progressPanel.updateStatusLabel("Adding " + tagName.getDisplayName() + " files to " + configPanel.getSelectedDocumentName() + "...");
            try {
                List<ContentTag> tags = tagsManager.getContentTagsByTagName(tagName);
                // Set progress bar to the amount of files we are reporting
                progressPanel.setMaximumProgress(tags.size());
                for (ContentTag tag : tags) {
                    Content content = tag.getContent();
                    if (content instanceof AbstractFile) {
                        
                        // Retrieve File Name
                        if (null != tag.getContent().getName()) {
                            filename = tag.getContent().getName();                                
                        } 
                        
                        // Retrieve File Path
                        if (null != ((AbstractFile) content).getLocalAbsPath()) {
                            Path = ((AbstractFile) content).getLocalAbsPath();                                
                        } else {
                            Path = tag.getContent().getUniquePath();                                
                        } 
                        
                        // Retrieve MD5 Hash
                        if (null != ((AbstractFile) content).getMd5Hash()) {
                            md5hash = ((AbstractFile) content).getMd5Hash();                                
                        }
                        
                        // Retrieve Created Time
                        createdtime = ((AbstractFile) content).getCtime();   
                        
                        // Retrieve Modified Time
                        modifiedtime = ((AbstractFile) content).getMtime();     
                        
                        // Retrieve Accessed Time
                        accessedtime = ((AbstractFile) content).getAtime();  
                        
                        // Write these values to the document, under the correct heading:    
                        ForensicExpertWitnessReport = configPanel.getSelectedDocument();
                                              
                    }                      
                    else {
                        JOptionPane.showMessageDialog(null, "Unable to add " + tag.getContent().getName() + "to the report.", "Add to Report Error", JOptionPane.ERROR_MESSAGE);
                        failedExports.add(tag.getContent().getName());
                        break;
                    }
                    
                    // Increment the progressPanel every time a file is processed
                    progressPanel.increment();  
                }
                
            } catch (TskCoreException ex) {
                Logger.getLogger(ForensicExpertWitnessReport.class.getName()).log(Level.SEVERE, "Error adding files", ex);
                JOptionPane.showMessageDialog(null, "Error getting selected tags for case.", "File Export Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (!failedExports.isEmpty()) {
            StringBuilder errorMessage = new StringBuilder("Failed to export the following files: ");
            for (int i = 0; i < failedExports.size(); ++i) {
                errorMessage.append(failedExports.get(i));
                if (failedExports.size() > 1 && i < failedExports.size() - 1) {
                    errorMessage.append(",");
                }
                if (i == failedExports.size() - 1) {
                    errorMessage.append(".");
                }
            }
            JOptionPane.showMessageDialog(null, errorMessage.toString(), "Hash Export Error", JOptionPane.ERROR_MESSAGE);
        }
        progressPanel.setIndeterminate(false);
        progressPanel.complete(ReportProgressPanel.ReportStatus.COMPLETE);
    }

    @Override
    public JPanel getConfigurationPanel() {
        configPanel = new ForensicExpertWitnessReportConfigPanel();
        return configPanel;       
    }
    
    // Get the default instance of this report
    public static synchronized ForensicExpertWitnessReport getDefault() {
        if (instance == null) {
            instance = new ForensicExpertWitnessReport();
        }
        return instance;
    }
    
    // Report Variables declaration //GEN-BEGIN:variables  
    private String filename = null;
    private String Path = null;
    private String md5hash = null;
    private long createdtime;
    private long modifiedtime;
    private long accessedtime;
    // End of variables declaration//GEN-END:variables      
    
    
}